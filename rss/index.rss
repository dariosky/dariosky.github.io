<!DOCTYPE html>
<html><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" version="2.0"><channel><title>Dario Varotto</title><description>Dreaming electric sheep</description><link>https://dariosky.github.io/</link><image><url>https://dariosky.github.io/favicon.png</url><title>Dario Varotto</title><link>https://dariosky.github.io/</link></image><generator>Ghost 1.21</generator><lastBuildDate>Sun, 05 Aug 2018 17:06:04 GMT</lastBuildDate><atom:link href="https://dariosky.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title>Add proper hot-reload to create-react-app</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;When you change something in a create-react-app your app will kindly reload, that's great, but it will do it reloading the page, losing the current state.&lt;/p&gt;
&lt;p&gt;&amp;quot;Proper&amp;quot; hot-reload instead will reload the single changed component, keeping it's state... it's a wonderful developer experience.&lt;br&gt;
In CRA the webpack configuration&lt;/p&gt;&lt;/div&gt;</description><link>https://dariosky.github.io/2018/08/05/add-proper-hot-reload-to-create-react-app/</link><guid isPermaLink="false">5b6724d32126707ecf8846ab</guid><category>react</category><dc:creator>Dario Varotto</dc:creator><pubDate>Sun, 05 Aug 2018 17:02:30 GMT</pubDate><media:content url="https://dariosky.github.io/content/images/2018/08/hot.jpg" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="https://dariosky.github.io/content/images/2018/08/hot.jpg" alt="Add proper hot-reload to create-react-app"&gt;&lt;p&gt;When you change something in a create-react-app your app will kindly reload, that's great, but it will do it reloading the page, losing the current state.&lt;/p&gt;
&lt;p&gt;&amp;quot;Proper&amp;quot; hot-reload instead will reload the single changed component, keeping it's state... it's a wonderful developer experience.&lt;br&gt;
In CRA the webpack configuration is normally unreachable, so we'll use some great package (&lt;a href="https://github.com/timarney/react-app-rewired"&gt;react-app-rewired&lt;/a&gt; and &lt;a href="https://github.com/cdharris/react-app-rewire-hot-loader"&gt;react-app-rewire-hot-loader&lt;/a&gt;) to allow our changes, here's a quick step-by-step guide on how to do it without going into much details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;yarn add -D react-app-rewired react-hot-loader react-app-rewire-hot-loader&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;config-overrides.js&lt;/code&gt; file on your project root with this content:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-javascript"&gt;const rewireReactHotLoader = require('react-app-rewire-hot-loader')

/* config-overrides.js */
module.exports = function override(config, env) {
  config = rewireReactHotLoader(config, env)
  return config
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change your &lt;code&gt;react-scripts&lt;/code&gt; to &lt;code&gt;react-app-rewired&lt;/code&gt; in your &lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;start&amp;quot;: &amp;quot;react-app-rewired start&amp;quot;,
&amp;quot;build&amp;quot;: &amp;quot;react-app-rewired build&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wrap your app in the hot HOC:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Hot-loader
import {hot} from 'react-hot-loader'

...
export default hot(module)(App)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That's it!&lt;br&gt;
Rerun your dev-server with &lt;code&gt;yarn start&lt;/code&gt; and your proper hot reload should be working.&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Signing GitHub commits</title><description>A quick guide to help you quickly setup signed commits for git and github</description><link>https://dariosky.github.io/2018/03/01/signing-github-commits/</link><guid isPermaLink="false">5a9742b59b24bd55676702f9</guid><category>github</category><dc:creator>Dario Varotto</dc:creator><pubDate>Thu, 01 Mar 2018 00:17:23 GMT</pubDate><media:content url="https://dariosky.github.io/content/images/2018/03/Perfect-App-Lock-Pro-3.png" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="https://dariosky.github.io/content/images/2018/03/Perfect-App-Lock-Pro-3.png" alt="Signing GitHub commits"&gt;&lt;p&gt;A short reference to guide you to &lt;a href="https://help.github.com/articles/signing-commits-with-gpg/"&gt;sign your commits in GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before starting is important that you check what email you're using for commits.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global --list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Will give you the &lt;code&gt;user.email&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="createagpgkey"&gt;Create a gpg key&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;gpg --full-gen-key
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When asked chose the default RSA, maximum length of 4096 and not expiring keys.&lt;br&gt;
In the key data, chose the same email from the previous point.&lt;/p&gt;
&lt;h2 id="exporttheexistingkeys"&gt;Export the existing keys&lt;/h2&gt;
&lt;p&gt;This is not required but it's interesting to be able to export the public and private keys just created.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gpg -a --export your@emai.com &amp;gt; your-backup.pub.gpg
gpg -a --export-secret-keys your@emai.com &amp;gt; your-backup.sec.gpg
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="tellgitaboutyourkeysanduseit"&gt;Tell git about your keys, and use it&lt;/h2&gt;
&lt;p&gt;Get the ID of your new gpg key via:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gpg -K
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tell Git to use it, and to sign your commits&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global user.signingkey XXXXXXX
git config --global commit.gpgsign true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;a href="https://intellij-support.jetbrains.com/hc/en-us/community/posts/206502489-Git-GPG-commit-signing-commit-s-from-IDE-in-effective-way"&gt;works for PyCharm/IntelliJ&lt;/a&gt; too!&lt;/p&gt;
&lt;p&gt;Edit (or create) &lt;code&gt;~/.gnupg/pgp.conf&lt;/code&gt; adding:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;no-tty
use-agent
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="tellgithubofyourkeys"&gt;Tell GitHub of your keys&lt;/h2&gt;
&lt;p&gt;Finally tell GitHub of your new key (be sure also to add and validate your email).&lt;br&gt;
Go on your &lt;a href="https://github.com/settings/keys"&gt;keys-page in your GitHub profile&lt;/a&gt;&lt;br&gt;
and add as &amp;quot;New GPG key&amp;quot; the public armor code of your key:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gpg --export --armor your@email.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;--&lt;/p&gt;
&lt;p&gt;That's it, when you'll commit next time, the GPG pass-phrase will be prompted, your commit will be signed and GitHub will show it as &amp;quot;verified&amp;quot;.&lt;br&gt;
Cool!&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>React - host in GitHub</title><description>How to deploy your create-react-apps in GitHub Pages in few easy steps.</description><link>https://dariosky.github.io/2017/10/21/react-host-in-github/</link><guid isPermaLink="false">59eb0ab721cf8a39f983b9ba</guid><category>github</category><category>react</category><category>deploy</category><dc:creator>Dario Varotto</dc:creator><pubDate>Sat, 21 Oct 2017 09:08:01 GMT</pubDate><media:content url="https://dariosky.github.io/content/images/2017/10/react-github.png" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="https://dariosky.github.io/content/images/2017/10/react-github.png" alt="React - host in GitHub"&gt;&lt;p&gt;In these months I'm playing with React, Redux and ES6.&lt;br&gt;
I fell in love with the Meteor ecosystem some year ago, and one of the things I appreciated a lot, was the ability to easily deploy the project online.&lt;/p&gt;
&lt;p&gt;I was happy to find a way to deploy the project in a similar way with React application created with &lt;code&gt;create-react-app&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here's how:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Add an &lt;code&gt;homepage&lt;/code&gt; field in your &lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;quot;homepage&amp;quot;: &amp;quot;https://myusername.github.io/my-app&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install gh-pages&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yarn add gh-page
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the &lt;code&gt;deploy&lt;/code&gt; to your command, in &lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  &amp;quot;scripts&amp;quot;: {
     &amp;quot;predeploy&amp;quot;: &amp;quot;npm run build&amp;quot;,
     &amp;quot;deploy&amp;quot;: &amp;quot;gh-pages -d build&amp;quot;,
     ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; yarn deploy
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;PS. Be sure to have the GitHub Pages are enabled in your&lt;br&gt;
GitHub settings&lt;/p&gt;
&lt;p&gt;References:&lt;br&gt;
&lt;a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#github-pages"&gt;create-react-app in GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content:encoded></item><item><title>Getting started with Ghost</title><description>&lt;div class="kg-card-markdown"&gt;&lt;p&gt;Today I was playing with &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt; an opensource platform for blogging that recently reached version 1.0.&lt;/p&gt;
&lt;p&gt;Ghost has a clean design, a great care for details and looks like a nice platform to use. Plus it's opensource and well supported!&lt;/p&gt;
&lt;p&gt;Here are some notes to get started:&lt;/p&gt;
&lt;h2 id="initialnodesetup"&gt;Initial NODE&lt;/h2&gt;&lt;/div&gt;</description><link>https://dariosky.github.io/2017/09/10/getting-started-with-ghost/</link><guid isPermaLink="false">59b45b7921f33f09025074ec</guid><category>ghost</category><category>blog</category><category>github</category><dc:creator>Dario Varotto</dc:creator><pubDate>Sat, 09 Sep 2017 22:28:38 GMT</pubDate><media:content url="https://dariosky.github.io/content/images/2017/09/FreeVector-Ghost-Vector.jpg" medium="image"/><content:encoded>&lt;div class="kg-card-markdown"&gt;&lt;img src="https://dariosky.github.io/content/images/2017/09/FreeVector-Ghost-Vector.jpg" alt="Getting started with Ghost"&gt;&lt;p&gt;Today I was playing with &lt;a href="https://ghost.org/"&gt;Ghost&lt;/a&gt; an opensource platform for blogging that recently reached version 1.0.&lt;/p&gt;
&lt;p&gt;Ghost has a clean design, a great care for details and looks like a nice platform to use. Plus it's opensource and well supported!&lt;/p&gt;
&lt;p&gt;Here are some notes to get started:&lt;/p&gt;
&lt;h2 id="initialnodesetup"&gt;Initial NODE Setup&lt;/h2&gt;
&lt;p&gt;If you need it, for being able to install npm packages globally without root permissions. Create &lt;code&gt;~/.npmrc&lt;/code&gt; file and write in it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;prefix = ~/.npm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;put this at the end of your &lt;code&gt;~/.profile&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export PATH=&amp;quot;~/.npm/bin:$PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="install"&gt;Install&lt;/h2&gt;
&lt;p&gt;There are various ways of install locally (I was following &lt;a href="https://github.com/paladini/ghost-on-github-pages"&gt;this guide&lt;/a&gt;) but the suggested one is via the &lt;strong&gt;ghost-cli&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the ghost-cli package&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; yarn global add ghost-cli@latest
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;create a new folder to keep your new Ghost-blog&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;install/start ghost with&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; yarn install local
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;configure your owner account locally: &lt;a href="https://dariosky.github.io/ghost/"&gt;https://dariosky.github.io/ghost/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;setup your blog ... until you're ready to publish&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="deploy"&gt;Deploy&lt;/h2&gt;
&lt;p&gt;For hosting Ghost you can go with the self-hosting option (it uses Node, and 1GB of RAM minimum is suggested), you can buy the hosting from the foundation and help founding the project, but I wanted to try to host it in the GitHub pages (that I started loving recently).&lt;/p&gt;
&lt;p&gt;Here is how:&lt;/p&gt;
&lt;h3 id="installpythonrequirements"&gt;Install Python requirements&lt;/h3&gt;
&lt;p&gt;To create the static dump of the site for GitHub, we need some Python tool:&lt;/p&gt;
&lt;p&gt;From the Ghost folder I used pyenv to setup a default virtual-environment named ghost (&lt;a href="https://pypi.python.org/pypi/buster/"&gt;buster&lt;/a&gt; needs Python 2.7):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pyenv virtualenv 2.7.13 ghost
pyenv local ghost
pip install buster
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We create a github repository named &lt;code&gt;username.github.io&lt;/code&gt; that will host the static site.&lt;br&gt;
Buster will take the site and freeze it in a &lt;code&gt;static&lt;/code&gt; folder.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;buster setup
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Choose &lt;a href="http://username.github.io"&gt;username.github.io&lt;/a&gt;, with your username when promptedm and then&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;buster generate
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now push to GitHub:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd static
git add -A
git commit -m &amp;quot;Website update at $(date)&amp;quot;
git push origin master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And that's it your blog should be updated&lt;/p&gt;
&lt;/div&gt;</content:encoded></item></channel></rss></html>